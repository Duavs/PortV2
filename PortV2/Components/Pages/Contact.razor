@page "/contact"
@inject ChatService ChatService

<div style="display: flex; flex-direction: column; gap: 20px; max-width: 600px; margin: auto;">

    <EditForm Model="@contactForm" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <InputText @bind-Value="contactForm.User" class="form-control" placeholder="Your Name" />
            <ValidationMessage For="@(() => contactForm.User)" />
        </div>
        <div class="mb-3">
            <InputText @bind-Value="contactForm.Email" class="form-control" placeholder="Your Email" />
            <ValidationMessage For="@(() => contactForm.Email)" />
        </div>
        <div class="mb-3">
            <InputTextArea @bind-Value="contactForm.Message" class="form-control" placeholder="Your Message" />
            <ValidationMessage For="@(() => contactForm.Message)" />
        </div>

        <button type="submit" class="btn btn-primary">Send Message</button>
    </EditForm>

    <ul>
        @foreach (var msg in messages)
        {
            <li>@msg</li>
        }
    </ul>
</div>

@code {
    // private string? user;
    // private string? email;
    // private string? message;

    private ContactFormModel contactForm = new();
    private List<string> messages = new();

    // private async Task SendMessage()
    // {
    //     // TODO: Implement SignalR message sending for contact form
    //     messages.Add($"[Contact Form] {user} ({email}): {message}");
    // }

    private async Task HandleValidSubmit()
    {
            await ChatService.SendMessageAsync(contactForm.User!, contactForm.Message!);
            messages.Add($"{contactForm.User}: {contactForm.Message}");
            contactForm = new(); // reset form
    }
}